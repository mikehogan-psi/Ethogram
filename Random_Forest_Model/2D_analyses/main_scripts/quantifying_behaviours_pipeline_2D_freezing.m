%% Behavioural Analysis Pipeline to statistically quantify and illustrate specific behavioural patterns (from 2D data)
% this script anaylses the behavioural data generated by the extracting_behaviours_pipeline

% is is devided into 3 sections
% Part 1: Setup - define the variables and directories (this is the only section that needs to be customized depending on which data-set you are analysing)
% Part 2: Data extraction and organisation (in this section the data is loaded into one 3D-matrix organises data by mouseID, trials and frames)
% Part 3: Data-groups (here data is split into treatment,stim-type and trial-period groups)
% Part 4: Figures (here figures are generated that visualize when and how much the target behaviour is exhibited)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PART 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Setup

% define target behaviour that was predicted and shall now be anlysed
            behaviour = 'freezing'; % !!!CHANGE THIS!!!

% define the name of model that was used to predict the data
            model_name = ['RFM_' behaviour '_1'];  % !!!CHANGE THIS!!!

% Setup directories

    % Common directory containing behavioural-label data and where anlysis outcomes shall be saved
        common_dir = ['C:\Users\Abi Hogan\Documents\Psychedelics_Internship\behavior_analysis\extinction_analysis\' behaviour '_analyses\' model_name]; % !!!CHANGE THIS!!!

    % folderpath containing behaviour-labels predicted by model
        predicted_labels_path = [common_dir '\predicted_labels_data\'];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PART 2 - Loading Data %%%%%%%%% skip if data matrix already generated %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Extracting data 

% Get a list of all predicted_labels files in the specified folder
fileList = dir(fullfile(predicted_labels_path, '*mouse*'));

% Initialise a cell arrays to store data information
labels_all_mice = cell(1, length(fileList)); % for each mouse (2 cells - part 1 and part 2) x and y coordinates (row) of body anterior body marker for each frame (colums)
file_names = cell(length(fileList), 1); % for each mouse (2 cells - part 1 and part 2)  filename

% iterate over each file, load it, and extract the prediced-labels data
for i = 1:length(fileList)
    
    % get path to current file
    filePath = fullfile(predicted_labels_path, fileList(i).name);
    
    % extact prediced-labels data and load it into the matrix
    load(filePath); 
    labels_all_mice{i} = predicted_labels'; 

    file_names{i} = fileList(i).name;
    % stores file names for sorting later
end


%% Sorting velocity matrix into mouse/part order

mouse_numbers = cellfun(@(x) sscanf(extractAfter(x, 'mouse'), '%d'), file_names);
% extracting the mouse number from the file names

[~, sort_idx] = sort(mouse_numbers);
% sort by mouse number amd get index for sorted order

labels_all_mice = labels_all_mice(sort_idx); % sort matrix

disp('Sorted File Names:');
disp(file_names(sort_idx));

file_names = file_names(sort_idx); % sort filenames

%% Concatinating two parts together for each mouse
% each mouse session was split into two videos (each 10040 frames)
%   -> behavioural data also split into 2 parts (p1 and p2)
%   => here these two parts are concatinated into one for each mouse 

paired_data = cell(1, length(labels_all_mice)/2);
%initialising new cell array half the size of original

for cell_ix = 1:2:length(labels_all_mice)
    %iterating over pairs of cells
    paired_data{(cell_ix+1)/2} = cat(2, labels_all_mice{cell_ix}, labels_all_mice{cell_ix+1});
    %stores concatenated matrices in correct indices of new matrix
end

labels_all_mice = paired_data; 
% -> now each cell contains behavioural labels for a mouse's whole session (i.e. 20080 frames)

%% splitting data into frames and trials
% here the data is organised into a matrix which contrains 3 dimentsions:
%   1. x(rows):     trial numbers
%   2. y(columns):  frame numbers
%   3. z(planes):   mouse numbers

num_frames = 502; % 502 frames per trial
num_trials = 40; % 40 trials
num_mice = length(labels_all_mice); 
behavioral_data_matrix = NaN(num_trials, num_frames, num_mice);

for mouse_idx = 1:num_mice % loop through all mice

    mouse_data = labels_all_mice{mouse_idx}; % loads data from current mouse
    
    for trial_ix = 1:num_trials % loop through all trials
        
        % loads data from current trial into the appropiate location of the matrix
        behavioral_data_matrix(trial_ix,:,mouse_idx) = mouse_data(((trial_ix-1)*num_frames + 1):(trial_ix*num_frames)); 

    end
end

save([common_dir '\' model_name '_data_matrix' ], 'behavioral_data_matrix'); % save the matrix encase data shall be further analysed at later timepoints

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PART 3 - Splitting Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Splitting into treatment groups and stim types 

% 2 treatment groups -> psilocybin (even MouseIDs) and vehicle (uneven MouseIDs) 
psilocybin_data = behavioral_data_matrix(:, :, 2:2:end);
vehicle_data = behavioral_data_matrix(:, :, 1:2:end);

% 2 stimsets -> each 20 stimuli (0 = flash, 1 = loom) -> each trial
stim_set_1 = [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1,...
    0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1];

stim_set_2 = [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0,...
    1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0 ,0 ,1 ,0];

% setting indexes for looms and flashes
stim_set_1_looms_idx = logical(stim_set_1);
stim_set_1_flashes_idx = ~stim_set_1_looms_idx;
stim_set_2_looms_idx = logical(stim_set_2);
stim_set_2_flashes_idx = ~stim_set_2_looms_idx;

% sepparating mice that get stimset 1 or stimset 2 to extraxt looms or flashes
psi_loom_ss1 = psilocybin_data(stim_set_1_looms_idx, :, 1:2:end);      % gets all the loom trials for stimset 1 mice (uneven numbers)
psi_flash_ss1 = psilocybin_data(stim_set_1_flashes_idx, :, 1:2:end);   % gets all the flash trials for stimset 1
psi_loom_ss2 = psilocybin_data(stim_set_2_looms_idx, :, 2:2:end);
psi_flash_ss2 = psilocybin_data(stim_set_2_flashes_idx, :, 2:2:end);

veh_loom_ss1 = vehicle_data(stim_set_1_looms_idx, :, 1:2:end);
veh_flash_ss1 = vehicle_data(stim_set_1_flashes_idx, :, 1:2:end);
veh_loom_ss2 = vehicle_data(stim_set_2_looms_idx, :, 2:2:end);
veh_flash_ss2 = vehicle_data(stim_set_2_flashes_idx, :, 2:2:end);

% concatenating all psi and veh freezing data
psi_loom_data = interleave(psi_loom_ss1, psi_loom_ss2);      % use interleave to preserve order 
psi_flash_data = interleave(psi_flash_ss1, psi_flash_ss2);
veh_loom_data = interleave(veh_loom_ss1, veh_loom_ss2);
veh_flash_data = interleave(veh_flash_ss1, veh_flash_ss2);

%% Splitting data into trial periods

% defining pre and post stimulus frames
pre_stim_period = 2:152;
during_stim_period = 153:201;
post_stim_period = 202:502;
early_post_stim_period = 203:352;
late_post_stim_period =  353:502;

%extracting pre and post-stim freezing data
psi_post_stim_loom = psi_loom_data(:, post_stim_period, :);
psi_post_stim_flash = psi_flash_data(:, post_stim_period, :);
veh_post_stim_loom = veh_loom_data(:, post_stim_period, :);
veh_post_stim_flash = veh_flash_data(:, post_stim_period, :);

psi_pre_stim_loom = psi_loom_data(:, pre_stim_period, :);
psi_pre_stim_flash = psi_flash_data(:, pre_stim_period, :);
veh_pre_stim_loom = veh_loom_data(:, pre_stim_period, :);
veh_pre_stim_flash = veh_flash_data(:, pre_stim_period, :);

%extracting early and late post-stim freezing data

psi_early_post_stim_loom = psi_loom_data(:, early_post_stim_period, :);
psi_early_post_stim_flash = psi_flash_data(:, early_post_stim_period, :);
veh_early_post_stim_loom = veh_loom_data(:, early_post_stim_period, :);
veh_early_post_stim_flash = veh_flash_data(:, early_post_stim_period, :);

psi_late_post_stim_loom = psi_loom_data(:, late_post_stim_period, :);
psi_late_post_stim_flash = psi_flash_data(:, late_post_stim_period, :);
veh_late_post_stim_loom = veh_loom_data(:, late_post_stim_period, :);
veh_late_post_stim_flash = veh_flash_data(:, late_post_stim_period, :);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PART 4 - Figures %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% setup for figures

% folderpath to save figures in
        fig_path =  [common_dir '\figures\'];    
        mkdir(fig_path); % creat figures folder if not already present
        addpath(fig_path); % add figured folder to matlab path

% clear all unnecessary variables for better overview
clearvars -except common_dir fps fig_path behavioral_data_matrix behaviour model_name ...
                  psilocybin_data vehicle_data psi_loom_data psi_flash_data veh_loom_data veh_flash_data

% defining constants 

fps = 15; % frame rate

mouse_nr = 15;

trial_nr = 20; % total trials number
trials = 1:20; % trial numbers

frame_nr = 502; % total frame number
frames = 1:502; % frame numbers
time_seconds = (frames / fps) - (202 / fps); % Convert frames to seconds and set Frame 202 as time 0


% Define colors: red for psilocybin, blue for vehicle
colors = [1 0 0;  % Red
          0 0 1]; % Blue


%% FIGURE 1: total time exhibiting behaviour over all trials and entire trial period

% Calculating total freezing time (in seconds) and SEM (mean over all trials and entire trial preriod) -> then averaged across all mice

psi_loom_trial_mean =  mean(squeeze(sum(sum(psi_loom_data, 1), 2)) / fps);
psi_flash_trial_mean = mean(squeeze(sum(sum(psi_flash_data,1), 2)) / fps);
veh_loom_trial_mean =  mean(squeeze(sum(sum(veh_loom_data, 1), 2)) / fps);
veh_flash_trial_mean = mean(squeeze(sum(sum(veh_flash_data,1), 2)) / fps);

psi_loom_trial_sem = mean(std(squeeze(sum(psi_loom_data, 2)) / fps) / sqrt(size(psi_loom_data, 3)));
psi_flash_trial_sem = mean(std(squeeze(sum(psi_flash_data, 2)) / fps) / sqrt(size(psi_flash_data, 3)));
veh_loom_trial_sem = mean(std(squeeze(sum(veh_loom_data, 2)) / fps) / sqrt(size(veh_loom_data, 3)));
veh_flash_trial_sem = mean(std(squeeze(sum(veh_flash_data, 2)) / fps) / sqrt(size(veh_flash_data, 3)));

% Group means and SEMs into arrays
means = [psi_loom_trial_mean, psi_flash_trial_mean;
         veh_loom_trial_mean, veh_flash_trial_mean];

sems = [psi_loom_trial_sem, psi_flash_trial_sem;
        veh_loom_trial_sem, veh_flash_trial_sem];

% Create grouped bar plot
fig1 = figure;
hold on;
barHandles = bar(means', 'grouped');

% Apply colors
for i = 1:2
    barHandles(i).FaceColor = colors(i,:);
end

% Add error bars
% Determine bar centers for error bar placement
ngroups = size(means, 2);
nbars = size(means, 1);
groupWidth = min(0.8, nbars/(nbars + 1.5));

for i = 1:nbars
    % Calculate center of each bar within a group
    x = (1:ngroups) - groupWidth/2 + (2*i-1) * groupWidth / (2*nbars);
    errorbar(x, means(i,:), sems(i,:), 'k', 'linestyle', 'none', 'linewidth', 1.5);
end

% Customize plot
xticks(1:2);
xticklabels({'Loom trials', 'Flash trials'});
ylabel(['total time ' behaviour ' (sec)']);
legend({'Psilocybin', 'Vehicle'}, 'Location', 'NorthEast');
title([ behaviour ' over all trials (mean per mouse)']);
hold off;

%save figure
saveas(fig1, [fig_path 'fig1_' model_name '_total_over_all_trials.fig']);

%% FIGURE 2: overall mean time exhibiting behaviour (per trial per mouse)

% Calculating mean freezing time (in seconds) and SEM (mean over all trials and entire trial preriod)
psi_loom_trial_mean = mean(mean(sum(psi_loom_data, 2) / fps, 3));
psi_flash_trial_mean = mean(mean(sum(psi_flash_data, 2) / fps, 3));
veh_loom_trial_mean = mean(mean(sum(veh_loom_data, 2) / fps, 3));
veh_flash_trial_mean = mean(mean(sum(veh_flash_data, 2) / fps, 3));

psi_loom_trial_sem = mean(std(sum(psi_loom_data, 2) / fps, [], 3) / sqrt(size(psi_loom_data, 3)));
psi_flash_trial_sem = mean(std(sum(psi_flash_data, 2) / fps, [], 3) / sqrt(size(psi_flash_data, 3)));
veh_loom_trial_sem = mean(std(sum(veh_loom_data, 2) / fps, [], 3) / sqrt(size(veh_loom_data, 3)));
veh_flash_trial_sem = mean(std(sum(veh_flash_data, 2) / fps, [], 3) / sqrt(size(veh_flash_data, 3)));

% Group means and SEMs into arrays
means = [psi_loom_trial_mean, psi_flash_trial_mean;
         veh_loom_trial_mean, veh_flash_trial_mean];

sems = [psi_loom_trial_sem, psi_flash_trial_sem;
        veh_loom_trial_sem, veh_flash_trial_sem];

% Define colors: red for psilocybin, blue for vehicle
colors = [1 0 0;  % Red
          0 0 1]; % Blue

% Create grouped bar plot
fig2 = figure;
hold on;
barHandles = bar(means', 'grouped');

% Apply colors
for i = 1:2
    barHandles(i).FaceColor = colors(i,:);
end

% Add error bars
% Determine bar centers for error bar placement
ngroups = size(means, 2);
nbars = size(means, 1);
groupWidth = min(0.8, nbars/(nbars + 1.5));

for i = 1:nbars
    % Calculate center of each bar within a group
    x = (1:ngroups) - groupWidth/2 + (2*i-1) * groupWidth / (2*nbars);
    errorbar(x, means(i,:), sems(i,:), 'k', 'linestyle', 'none', 'linewidth', 1.5);
end

% Customize plot
xticks(1:2);
xticklabels({'Loom trails', 'Flash trials'});
ylabel(['mean time ' behaviour ' (sec)']);
legend({'Psilocybin', 'Vehicle'}, 'Location', 'NorthEast');
title([behaviour ' per trial per mouse']);
hold off;

%save figure
saveas(fig2, [fig_path 'fig2_' model_name '_mean_per_trial_per_mouse.fig']);

%% FIGURE 3 AND 4: mean time exhibiting behaviour between trials (over entire trial-period)

% Calculating mean freezing time (in seconds) and SEM
psi_loom_trial_mean = mean(sum(psi_loom_data, 2) / fps, 3);
psi_flash_trial_mean = mean(sum(psi_flash_data, 2) / fps, 3);
veh_loom_trial_mean = mean(sum(veh_loom_data, 2) / fps, 3);
veh_flash_trial_mean = mean(sum(veh_flash_data, 2) / fps, 3);

psi_loom_trial_sem = std(sum(psi_loom_data, 2) / fps, [], 3) / sqrt(size(psi_loom_data, 3));
psi_flash_trial_sem = std(sum(psi_flash_data, 2) / fps, [], 3) / sqrt(size(psi_flash_data, 3));
veh_loom_trial_sem = std(sum(veh_loom_data, 2) / fps, [], 3) / sqrt(size(veh_loom_data, 3));
veh_flash_trial_sem = std(sum(veh_flash_data, 2) / fps, [], 3) / sqrt(size(veh_flash_data, 3));

% Plot Psilocybin Group
fig3 =  figure;
        hold on;
        errorbar(trials, psi_loom_trial_mean, psi_loom_trial_sem, '-o', 'DisplayName', 'Loom');
        errorbar(trials, psi_flash_trial_mean, psi_flash_trial_sem, '-x', 'DisplayName', 'Flash');
        hold off;
        title([behaviour ' Across Repeated Trials: Psilocybin']);
        legend('Location', 'Best');
        grid on;

% Plot Vehicle Group
fig4 =  figure;
        hold on;
        errorbar(trials, veh_loom_trial_mean, veh_loom_trial_sem, '-o', 'DisplayName', 'Loom');
        errorbar(trials, veh_flash_trial_mean, veh_flash_trial_sem, '-x', 'DisplayName', 'Flash');
        hold off;
        title([behaviour ' Behaviour Across Repeated Trials: Vehicle']);
        legend('Location', 'Best');
        grid on;

% Set common axis labels
for i = 1:2
    figure(i);
    xlabel('Trial Number');
    ylabel(['Mean Time Spent ' behaviour ' (sec)']);
    % Set consistent axis limits (modify based on data range)
    xlim([1, 20]);
    ylim([0, max([psi_loom_trial_mean + psi_loom_trial_sem, ...
                  psi_flash_trial_mean + psi_flash_trial_sem, ...
                  veh_loom_trial_mean + veh_loom_trial_sem, ...
                  veh_flash_trial_mean + veh_flash_trial_sem], [], 'all')]);
end

%save figures
saveas(fig3, [ fig_path 'fig3_' model_name '_over_trials_psi.fig']);
saveas(fig4, [ fig_path 'fig4_' model_name '_over_trials_veh.fig']);



%% FIGURE 5 AND 6: mean probabily exhibiting behaviour over all trials (entire trial period)

% Calculating mean probabilities of behaviour extpression across all trials (in all frames) 
prob_psi_loom = squeeze(mean(psi_loom_data, 1));
prob_veh_loom = squeeze(mean(veh_loom_data, 1));
prob_psi_flash = squeeze(mean(psi_flash_data, 1));
prob_veh_flash = squeeze(mean(veh_flash_data, 1));

% Plot Loom trials
fig5 =  figure;
        hold on;
        plot(time_seconds, mean(prob_psi_loom, 2)', 'b', 'LineWidth', 1.5, 'DisplayName', 'Psilocybin');
        plot(time_seconds, mean(prob_veh_loom, 2)', 'r', 'LineWidth', 1.5, 'DisplayName', 'Vehicle');
        
        % Add stimulus start and end lines
        xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
        xline((152 / fps) - (202 / fps), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152
        
        % Customize plot
        xlabel('Time (sec)');
        ylabel(['mean ' behaviour ' probability']);
        legend('Psilocybin', 'Vehicle', 'Location', 'northeast');
        title([behaviour ' during loom trials (all Mice)']);
        xlim([(1 / fps) - (202 / fps), (502 / fps) - (202 / fps)]); % Adjust x-axis to time range
        ylim([0, 0.5]);
        grid on; % Optional: Add gridlines
        hold off;

% Plot Flash trials
fig6 =  figure;
        hold on;
        plot(time_seconds, mean(prob_psi_flash, 2)', 'b', 'LineWidth', 1.5, 'DisplayName', 'Psilocybin');
        plot(time_seconds, mean(prob_veh_flash, 2)', 'r', 'LineWidth', 1.5, 'DisplayName', 'Vehicle');
        
        % Add stimulus start and end lines
        xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
        xline((152 / fps) - (202 / fps), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152
        
        % Customize plot
        xlabel('Time (sec)');
        ylabel(['mean ' behaviour ' probability']);
        legend('Psilocybin', 'Vehicle', 'Location', 'northeast');
        title([behaviour ' during flash trials (all Mice)']);
        xlim([(1 / fps) - (202 / fps), (502 / fps) - (202 / fps)]); % Adjust x-axis to time range
        ylim([0, 0.5]);
        grid on; % Optional: Add gridlines
        hold off;

%save figures
saveas(fig5, [ fig_path 'fig5_' model_name '_mean_over_time_psi.fig']);
saveas(fig6, [ fig_path 'fig6_' model_name '_mean_over_time_veh.fig']);

%% FIGURE 7 AND 8: median probabily exhibiting behaviour over all trials (entire trial period)

% Calculating mean probabilities of behaviour extpression across all trials (in all frames) 
prob_psi_loom = squeeze(mean(psi_loom_data, 1));
prob_veh_loom = squeeze(mean(veh_loom_data, 1));
prob_psi_flash = squeeze(mean(psi_flash_data, 1));
prob_veh_flash = squeeze(mean(veh_flash_data, 1));

% Plot Loom trials
fig7 =  figure;
        hold on;
        plot(time_seconds, median(prob_psi_loom, 2)', 'b', 'LineWidth', 1.5, 'DisplayName', 'Psilocybin');
        plot(time_seconds, median(prob_veh_loom, 2)', 'r', 'LineWidth', 1.5, 'DisplayName', 'Vehicle');
        
        % Add stimulus start and end lines
        xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
        xline((152 / fps) - (202 / fps), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152
        
        % Customize plot
        xlabel('Time (sec)');
        ylabel(['median ' behaviour ' probability']);
        legend('Psilocybin', 'Vehicle', 'Location', 'northeast');
        title([behaviour ' during loom trials (all Mice)']);
        xlim([(1 / fps) - (202 / fps), (502 / fps) - (202 / fps)]); % Adjust x-axis to time range
        ylim([0, 0.5]);
        grid on; % Optional: Add gridlines
        hold off;

% Plot Flash trials
fig8 =  figure;
        hold on;
        plot(time_seconds, median(prob_psi_flash, 2)', 'b', 'LineWidth', 1.5, 'DisplayName', 'Psilocybin');
        plot(time_seconds, median(prob_veh_flash, 2)', 'r', 'LineWidth', 1.5, 'DisplayName', 'Vehicle');
        
        % Add stimulus start and end lines
        xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
        xline((152 / fps) - (202 / fps), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152
        
        % Customize plot
        xlabel('Time (sec)');
        ylabel(['median ' behaviour ' probability']);
        legend('Psilocybin', 'Vehicle', 'Location', 'northeast');
        title([behaviour ' during flash trials (all Mice)']);
        xlim([(1 / fps) - (202 / fps), (502 / fps) - (202 / fps)]); % Adjust x-axis to time range
        ylim([0, 0.5]);
        grid on; % Optional: Add gridlines
        hold off;

%save figures
saveas(fig7, [ fig_path 'fig7_' model_name '_median_over_time_psi.fig']);
saveas(fig8, [ fig_path 'fig8_' model_name '_median_over_time_veh.fig']);


%% FIGURE 9 and 10 : median and mean probabily exhibiting behaviour for early and later trials - loom only (entire trial period) 

% Split data into early and later trials
early_trials_psi_loom = psi_loom_data(1:10, :, :);
early_trials_veh_loom = veh_loom_data(1:10, :, :);
late_trials_psi_loom = psi_loom_data(11:20, :, :);
late_trials_veh_loom = veh_loom_data(11:20, :, :);

%computing mean freezing probability between all mice over all loom trials (over whole trial period)
early_mean_freezing_psi = squeeze(mean(early_trials_psi_loom, 1));
early_mean_freezing_veh = squeeze(mean(early_trials_veh_loom, 1));
late_mean_freezing_psi = squeeze(mean(late_trials_psi_loom, 1));
late_mean_freezing_veh = squeeze(mean(late_trials_veh_loom, 1));

% Plot median freezing probabilities
fig9 =  figure;
        hold on
        plot(time_seconds, median(early_mean_freezing_psi, 2)', 'Color', [0.85, 0.4, 0], 'LineWidth', 1, 'DisplayName', 'Early Psilocybin'); % Orange
        plot(time_seconds, median(early_mean_freezing_veh, 2)', 'Color', [0.4, 0.8, 1], 'LineWidth', 1, 'DisplayName', 'Early Vehicle'); % Light Blue
        plot(time_seconds, median(late_mean_freezing_psi, 2)', 'Color', [1, 0, 0], 'LineWidth', 1, 'DisplayName', 'Late Psilocybin'); % Red
        plot(time_seconds, median(late_mean_freezing_veh, 2)', 'Color', [0, 0, 0.8], 'LineWidth', 1, 'DisplayName', 'Late Vehicle'); % Dark Blue
        
        % Add stimulus start and end lines
        xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
        xline((152 / framerate) - (202 / framerate), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152
        
        % Customize plot
        xlabel('Time (sec)');
        ylabel(['median ' behaviour ' probability']);
        legend('Early Psilocybin', 'Early Vehicle', 'Late Psilocybin', 'Late Vehicle',   'Location', 'northeast');
        title([behaviour ' during early and late loom trials']);
        xlim([(1 / framerate) - (202 / framerate), (502 / framerate) - (202 / framerate)]); % Adjust x-axis to time range
        ylim([0, 0.6]);
        %ylim auto
        grid on; % Optional: Add gridlines       
        hold off;

% Plot median freezing probabilities
fig10 = figure;
        hold on
        plot(time_seconds, mean(early_mean_freezing_psi, 2)', 'Color', [0.85, 0.4, 0], 'LineWidth', 1, 'DisplayName', 'Early Psilocybin'); % Orange
        plot(time_seconds, mean(early_mean_freezing_veh, 2)', 'Color', [0.4, 0.8, 1], 'LineWidth', 1, 'DisplayName', 'Early Vehicle'); % Light Blue
        plot(time_seconds, mean(late_mean_freezing_psi, 2)', 'Color', [1, 0, 0], 'LineWidth', 1, 'DisplayName', 'Late Psilocybin'); % Red
        plot(time_seconds, mean(late_mean_freezing_veh, 2)', 'Color', [0, 0, 0.8], 'LineWidth', 1, 'DisplayName', 'Late Vehicle'); % Dark Blue
        
        % Add stimulus start and end lines
        xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
        xline((152 / framerate) - (202 / framerate), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152
        
        % Customize plot
        xlabel('Time (sec)');
        ylabel(['mean ' behaviour ' probability']);
        legend('Early Psilocybin', 'Early Vehicle', 'Late Psilocybin', 'Late Vehicle',   'Location', 'northeast');
        title([behaviour ' during early and late loom trials']);
        xlim([(1 / framerate) - (202 / framerate), (502 / framerate) - (202 / framerate)]); % Adjust x-axis to time range
        ylim([0, 0.6]);
        %ylim auto
        grid on; % Optional: Add gridlines     
        hold off;

%save figures
saveas(fig9, [ fig_path 'fig9_' model_name 'median_early_vs_late_loom_trials.fig']);
saveas(fig10, [ fig_path 'fig9_' model_name 'mean_early_vs_late_loom_trials.fig']);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% optional figures %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FIGURE 1: total time exhibiting behaviour over all trials and over stimulus period

during_stim_period = 153:201;

% Calculating total freezing time (in seconds) and SEM (mean over all trials and entire trial preriod) -> then averaged across all mice

psi_loom_trial_mean =  mean(squeeze(sum(sum(psi_loom_data(11:20, during_stim_period, :), 1), 2)) / fps);
psi_flash_trial_mean = mean(squeeze(sum(sum(psi_flash_data(11:20, during_stim_period, :),1), 2)) / fps);
veh_loom_trial_mean =  mean(squeeze(sum(sum(veh_loom_data(11:20, during_stim_period, :), 1), 2)) / fps);
veh_flash_trial_mean = mean(squeeze(sum(sum(veh_flash_data(11:20, during_stim_period, :),1), 2)) / fps);

psi_loom_trial_sem = mean(std(squeeze(sum(psi_loom_data(11:20, during_stim_period, :), 2)) / fps) / sqrt(size(psi_loom_data(11:20, during_stim_period, :), 3)));
psi_flash_trial_sem = mean(std(squeeze(sum(psi_flash_data(11:20, during_stim_period, :), 2)) / fps) / sqrt(size(psi_flash_data(11:20, during_stim_period, :), 3)));
veh_loom_trial_sem = mean(std(squeeze(sum(veh_loom_data(11:20, during_stim_period, :), 2)) / fps) / sqrt(size(veh_loom_data(11:20, during_stim_period, :), 3)));
veh_flash_trial_sem = mean(std(squeeze(sum(veh_flash_data(11:20, during_stim_period, :), 2)) / fps) / sqrt(size(veh_flash_data(11:20, during_stim_period, :), 3)));

% Group means and SEMs into arrays
means = [psi_loom_trial_mean, psi_flash_trial_mean;
         veh_loom_trial_mean, veh_flash_trial_mean];

sems = [psi_loom_trial_sem, psi_flash_trial_sem;
        veh_loom_trial_sem, veh_flash_trial_sem];

% Create grouped bar plot
fig1 = figure;
hold on;
barHandles = bar(means', 'grouped');

% Apply colors
for i = 1:2
    barHandles(i).FaceColor = colors(i,:);
end

% Add error bars
% Determine bar centers for error bar placement
ngroups = size(means, 2);
nbars = size(means, 1);
groupWidth = min(0.8, nbars/(nbars + 1.5));

for i = 1:nbars
    % Calculate center of each bar within a group
    x = (1:ngroups) - groupWidth/2 + (2*i-1) * groupWidth / (2*nbars);
    errorbar(x, means(i,:), sems(i,:), 'k', 'linestyle', 'none', 'linewidth', 1.5);
end

% Customize plot
xticks(1:2);
xticklabels({'Loom trials', 'Flash trials'});
ylabel(['total time ' behaviour ' (sec)']);
legend({'Psilocybin', 'Vehicle'}, 'Location', 'NorthEast');
title([ behaviour ' over all trials (mean per mouse)']);
hold off;

%save figure
%saveas(fig1, [fig_path 'fig1_' model_name '_total_over_all_trials.fig']);

%% FIGURE 2: overall mean time exhibiting behaviour over stimulus period (per trial per mouse)

during_stim_period = 153:201;

% Calculating mean freezing time (in seconds) and SEM (mean over all trials and entire trial preriod)
psi_loom_trial_mean = mean(mean(sum(psi_loom_data(:, during_stim_period, :), 2) / fps, 3));
psi_flash_trial_mean = mean(mean(sum(psi_flash_data(:, during_stim_period, :), 2) / fps, 3));
veh_loom_trial_mean = mean(mean(sum(veh_loom_data(:, during_stim_period, :), 2) / fps, 3));
veh_flash_trial_mean = mean(mean(sum(veh_flash_data(:, during_stim_period, :), 2) / fps, 3));

psi_loom_trial_sem = mean(std(sum(psi_loom_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(psi_loom_data(:, during_stim_period, :), 3)));
psi_flash_trial_sem = mean(std(sum(psi_flash_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(psi_flash_data(:, during_stim_period, :), 3)));
veh_loom_trial_sem = mean(std(sum(veh_loom_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(veh_loom_data(:, during_stim_period, :), 3)));
veh_flash_trial_sem = mean(std(sum(veh_flash_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(veh_flash_data(:, during_stim_period, :), 3)));

% Group means and SEMs into arrays
means = [psi_loom_trial_mean, psi_flash_trial_mean;
         veh_loom_trial_mean, veh_flash_trial_mean];

sems = [psi_loom_trial_sem, psi_flash_trial_sem;
        veh_loom_trial_sem, veh_flash_trial_sem];

% Define colors: red for psilocybin, blue for vehicle
colors = [1 0 0;  % Red
          0 0 1]; % Blue

% Create grouped bar plot
fig2 = figure;
hold on;
barHandles = bar(means', 'grouped');

% Apply colors
for i = 1:2
    barHandles(i).FaceColor = colors(i,:);
end

% Add error bars
% Determine bar centers for error bar placement
ngroups = size(means, 2);
nbars = size(means, 1);
groupWidth = min(0.8, nbars/(nbars + 1.5));

for i = 1:nbars
    % Calculate center of each bar within a group
    x = (1:ngroups) - groupWidth/2 + (2*i-1) * groupWidth / (2*nbars);
    errorbar(x, means(i,:), sems(i,:), 'k', 'linestyle', 'none', 'linewidth', 1.5);
end

% Customize plot
xticks(1:2);
xticklabels({'Loom trails', 'Flash trials'});
ylabel(['mean time ' behaviour ' (sec)']);
legend({'Psilocybin', 'Vehicle'}, 'Location', 'NorthEast');
title([behaviour ' per trial per mouse']);
hold off;

%save figure
%saveas(fig2, [fig_path 'fig2_' model_name '_mean_per_trial_per_mouse.fig']);

%% FIGURE 3b AND 4b: mean time exhibiting behaviour between trials (over stimulus period)

during_stim_period = 153:201;

% Calculating mean freezing time (in seconds) and SEM
psi_loom_trial_mean = mean(sum(psi_loom_data(:, during_stim_period, :), 2) / fps, 3);
psi_flash_trial_mean = mean(sum(psi_flash_data(:, during_stim_period, :), 2) / fps, 3);
veh_loom_trial_mean = mean(sum(veh_loom_data(:, during_stim_period, :), 2) / fps, 3);
veh_flash_trial_mean = mean(sum(veh_flash_data(:, during_stim_period, :), 2) / fps, 3);

psi_loom_trial_sem = std(sum(psi_loom_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(psi_loom_data(:, during_stim_period, :), 3));
psi_flash_trial_sem = std(sum(psi_flash_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(psi_flash_data(:, during_stim_period, :), 3));
veh_loom_trial_sem = std(sum(veh_loom_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(veh_loom_data(:, during_stim_period, :), 3));
veh_flash_trial_sem = std(sum(veh_flash_data(:, during_stim_period, :), 2) / fps, [], 3) / sqrt(size(veh_flash_data(:, during_stim_period, :), 3));

% Plot Psilocybin Group
fig3 =  figure;
        hold on;
        errorbar(trials, psi_loom_trial_mean, psi_loom_trial_sem, '-o', 'DisplayName', 'Loom');
        errorbar(trials, psi_flash_trial_mean, psi_flash_trial_sem, '-x', 'DisplayName', 'Flash');
        hold off;
        title([behaviour ' during stimulus-period - Across Repeated Trials: Psilocybin']);
        legend('Location', 'Best');
        grid on;

% Plot Vehicle Group
fig4 =  figure;
        hold on;
        errorbar(trials, veh_loom_trial_mean, veh_loom_trial_sem, '-o', 'DisplayName', 'Loom');
        errorbar(trials, veh_flash_trial_mean, veh_flash_trial_sem, '-x', 'DisplayName', 'Flash');
        hold off;
        title([behaviour ' during stimulus-period - Behaviour Across Repeated Trials: Vehicle']);
        legend('Location', 'Best');
        grid on;

% Set common axis labels
for i = 1:2
    figure(i);
    xlabel('Trial Number');
    ylabel(['Mean Time Spent ' behaviour ' duing-stimulus (sec)']);
    % Set consistent axis limits (modify based on data range)
    xlim([1, 20]);
    ylim([0, max([psi_loom_trial_mean + psi_loom_trial_sem, ...
                  psi_flash_trial_mean + psi_flash_trial_sem, ...
                  veh_loom_trial_mean + veh_loom_trial_sem, ...
                  veh_flash_trial_mean + veh_flash_trial_sem], [], 'all')]);
end

%save figures
saveas(fig3, [ fig_path 'fig3b_' model_name '_over_trials_stim_period_psi.fig']);
saveas(fig4, [ fig_path 'fig4b_' model_name '_over_trials_stim_period_veh.fig']);







%% FIGURE 9B: median probabily exhibiting behaviour ONLY later trials - loom only (entire trial period) 

% Split data into early and later trials
early_trials_psi_loom = psi_loom_data(1:10, :, :);
early_trials_veh_loom = veh_loom_data(1:10, :, :);
late_trials_psi_loom = psi_loom_data(11:20, :, :);
late_trials_veh_loom = veh_loom_data(11:20, :, :);

%computing mean freezing probability between all mice over all loom trials (over whole trial period)
early_mean_freezing_psi = squeeze(mean(early_trials_psi_loom, 1));
early_mean_freezing_veh = squeeze(mean(early_trials_veh_loom, 1));
late_mean_freezing_psi = squeeze(mean(late_trials_psi_loom, 1));
late_mean_freezing_veh = squeeze(mean(late_trials_veh_loom, 1));

% Constants
framerate = 15; % frames per second
frames = 1:502; % original frame numbers
time_seconds = (frames / framerate) - (202 / framerate); % Convert frames to seconds and set Frame 202 as time 0

% Plot median freezing probabilities
fig9 = figure;
hold on
%plot(time_seconds, median(early_mean_freezing_psi, 2)', 'Color', [0.85, 0.4, 0], 'LineWidth', 1, 'DisplayName', 'Early Psilocybin'); % Orange
%plot(time_seconds, median(early_mean_freezing_veh, 2)', 'Color', [0.4, 0.8, 1], 'LineWidth', 1, 'DisplayName', 'Early Vehicle'); % Light Blue
plot(time_seconds, median(late_mean_freezing_psi, 2)', 'Color', [1, 0, 0], 'LineWidth', 1, 'DisplayName', 'Late Psilocybin'); % Red
plot(time_seconds, median(late_mean_freezing_veh, 2)', 'Color', [0, 0, 0.8], 'LineWidth', 1, 'DisplayName', 'Late Vehicle'); % Dark Blue

% Add stimulus start and end lines
xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
xline((152 / framerate) - (202 / framerate), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152

% Customize plot
xlabel('Time (sec)');
ylabel(['median ' behaviour ' probability']);
legend('Psilocybin', 'Vehicle',   'Location', 'northeast');
title([behaviour ' during late loom trials']);
xlim([(1 / framerate) - (202 / framerate), (502 / framerate) - (202 / framerate)]); % Adjust x-axis to time range
ylim([0, 0.6]);
%ylim auto
grid on; % Optional: Add gridlines

hold off;

%save figures
%saveas(fig9, [ fig_path 'fig9B_' model_name 'median_late_loom_trials.fig']);

%% FIGURE 10: mean probabily exhibiting behaviour ONLY later trials - loom only (entire trial period) 

% Split data into early and later trials
early_trials_psi_loom = psi_loom_data(1:10, :, :);
early_trials_veh_loom = veh_loom_data(1:10, :, :);
late_trials_psi_loom = psi_loom_data(11:20, :, :);
late_trials_veh_loom = veh_loom_data(11:20, :, :);

%computing mean freezing probability between all mice over all loom trials (over whole trial period)
early_mean_freezing_psi = squeeze(mean(early_trials_psi_loom, 1));
early_mean_freezing_veh = squeeze(mean(early_trials_veh_loom, 1));
late_mean_freezing_psi = squeeze(mean(late_trials_psi_loom, 1));
late_mean_freezing_veh = squeeze(mean(late_trials_veh_loom, 1));

% Constants
framerate = 15; % frames per second
frames = 1:502; % original frame numbers
time_seconds = (frames / framerate) - (202 / framerate); % Convert frames to seconds and set Frame 202 as time 0

% Plot median freezing probabilities
fig10 = figure;
hold on
%plot(time_seconds, mean(early_mean_freezing_psi, 2)', 'Color', [0.85, 0.4, 0], 'LineWidth', 1, 'DisplayName', 'Early Psilocybin'); % Orange
%plot(time_seconds, mean(early_mean_freezing_veh, 2)', 'Color', [0.4, 0.8, 1], 'LineWidth', 1, 'DisplayName', 'Early Vehicle'); % Light Blue
plot(time_seconds, mean(late_mean_freezing_psi, 2)', 'Color', [1, 0, 0], 'LineWidth', 1, 'DisplayName', 'Late Psilocybin'); % Red
plot(time_seconds, mean(late_mean_freezing_veh, 2)', 'Color', [0, 0, 0.8], 'LineWidth', 1, 'DisplayName', 'Late Vehicle'); % Dark Blue

% Add stimulus start and end lines
xline(0, '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus End'); % Time 0 (Frame 202)
xline((152 / framerate) - (202 / framerate), '-k', 'LineWidth', 1, 'DisplayName', 'Stimulus Start'); % Time of Frame 152

% Customize plot
xlabel('Time (sec)');
ylabel(['mean ' behaviour ' probability']);
legend('Late Psilocybin', 'Late Vehicle',   'Location', 'northeast');
title([behaviour ' during early and late loom trials']);
xlim([(1 / framerate) - (202 / framerate), (502 / framerate) - (202 / framerate)]); % Adjust x-axis to time range
ylim([0, 0.6]);
%ylim auto
grid on; % Optional: Add gridlines

hold off;

save figures
saveas(fig10, [ fig_path 'fig10b_' model_name 'mean_late_loom_trials.fig']);







%% Plotting mean freezing probability between all mice over all loom trials (all frames)
mean_behaviour_psi = squeeze(mean(psi_loom_data, 1));
mean_behaviour_veh = squeeze(mean(veh_loom_data, 1));

figure;
% Using imagesc to plot the data
imagesc([mean_behaviour_psi'; mean_behaviour_veh']); 
colorbar; % Add colour bar

% Adding stimulus markers
hold on;
xline(152, '-k', 'LineWidth', 1.5, 'DisplayName', 'Stimulus Start'); % Stimulus start
xline(202, '-k', 'LineWidth', 1.5, 'DisplayName', 'Stimulus End');   % Stimulus end
hold off;

% Add titles and labels
title('Freezing Per Frame Per Mouse (Whole Loom Trial)'); % Graph title
xlabel('Frame'); % x-axis label
ylabel('Mice (Psilocybin Group and Vehicle Group)'); % y-axis label

% Colour bar labelling
c = colorbar;
c.Label.String = 'Mean Freezing Probability';

% Adjust the axis for better appearance
axis tight; % Fit the axis tightly around the data

%% Comparing early and late trials and pre and post stimulus periods (% of time spent freezing)

psi_loom_avg = reshape(mean(psi_loom_data,2), 20, 1, 10);
psi_flash_avg = reshape(mean(psi_flash_data,2), 20, 1, 10);
veh_loom_avg = reshape(mean(veh_loom_data,2), 20, 1 ,10);
veh_flash_avg = reshape(mean(veh_flash_data,2), 20, 1, 10);

response_matrix = cat(2, psi_loom_avg, psi_flash_avg,...
    veh_loom_avg, veh_flash_avg);

early_responses = mean(response_matrix(1:10, :, :), 1); % Trials 1–10
late_responses = mean(response_matrix(11:20, :, :), 1); % Trials 11–20

% Aggregate across mice
early_mean = squeeze(mean(early_responses, 3)); % [4 conditions]
late_mean = squeeze(mean(late_responses, 3));

% Create a grouped bar plot
figure;
hBar = bar([early_mean; late_mean]', 'grouped');  % Transpose to match the structure

% Set colors for the bars
hBar(1).FaceColor = 'b';  % Blue for early trials
hBar(2).FaceColor = 'g';  % Green for late trials

% Add axis labels
xlabel('Condition (Psilocybin Loom, Psilocybin Flash, Vehicle Loom, Vehicle Flash)');
ylabel('Mean Response (Freezing Probability)');

% Add a legend
legend({'Early Trials', 'Late Trials'}, 'Location', 'northeast');

% Set the title
title('Early vs Late Responses Across Conditions');

%% Comparing mean freezing (across mice and trials) in early and late post-stim periods

fps = 15; % defining frame rate

% Calculating mean freezing time (in seconds) and SEM (across all mice and all trials) 

% for early post-stim period 
early_psi_loom_trial_mean = mean(mean(sum(psi_early_post_stim_loom, 2) / fps, 3));
early_psi_flash_trial_mean = mean(mean(sum(psi_early_post_stim_flash, 2) / fps, 3));
early_veh_loom_trial_mean = mean(mean(sum(veh_early_post_stim_loom, 2) / fps, 3));
early_veh_flash_trial_mean = mean(mean(sum(veh_early_post_stim_flash, 2) / fps, 3));

early_psi_loom_trial_sem = mean(std(sum(psi_early_post_stim_loom, 2) / fps, [], 3) / sqrt(size(psi_early_post_stim_loom, 3)));
early_psi_flash_trial_sem = mean(std(sum(psi_early_post_stim_flash, 2) / fps, [], 3) / sqrt(size(psi_early_post_stim_flash, 3)));
early_veh_loom_trial_sem = mean(std(sum(veh_early_post_stim_loom, 2) / fps, [], 3) / sqrt(size(veh_early_post_stim_loom, 3)));
early_veh_flash_trial_sem = mean(std(sum(veh_early_post_stim_flash, 2) / fps, [], 3) / sqrt(size(veh_early_post_stim_flash, 3)));

% for late post-stim period 
late_psi_loom_trial_mean = mean(mean(sum(psi_late_post_stim_loom, 2) / fps, 3));
late_psi_flash_trial_mean = mean(mean(sum(psi_late_post_stim_flash, 2) / fps, 3));
late_veh_loom_trial_mean = mean(mean(sum(veh_late_post_stim_loom, 2) / fps, 3));
late_veh_flash_trial_mean = mean(mean(sum(veh_late_post_stim_flash, 2) / fps, 3));

late_psi_loom_trial_sem = mean(std(sum(psi_late_post_stim_loom, 2) / fps, [], 3) / sqrt(size(psi_late_post_stim_loom, 3)));
late_psi_flash_trial_sem = mean(std(sum(psi_late_post_stim_flash, 2) / fps, [], 3) / sqrt(size(psi_late_post_stim_flash, 3)));
late_veh_loom_trial_sem = mean(std(sum(veh_late_post_stim_loom, 2) / fps, [], 3) / sqrt(size(veh_late_post_stim_loom, 3)));
late_veh_flash_trial_sem = mean(std(sum(veh_late_post_stim_flash, 2) / fps, [], 3) / sqrt(size(veh_late_post_stim_flash, 3)));

% concatinate early and late data
psi_loom_means = [early_psi_loom_trial_mean, late_psi_loom_trial_mean];
psi_flash_means = [early_psi_flash_trial_mean, late_psi_flash_trial_mean];
veh_loom_means = [early_veh_loom_trial_mean, late_veh_loom_trial_mean];
veh_flash_means = [early_veh_flash_trial_mean, late_veh_flash_trial_mean];

psi_loom_sems = [early_psi_loom_trial_sem, late_psi_loom_trial_sem];
psi_flash_sems = [early_psi_flash_trial_sem, late_psi_flash_trial_sem];
veh_loom_sems = [early_veh_loom_trial_sem, late_veh_loom_trial_sem];
veh_flash_sems = [early_veh_flash_trial_sem, late_veh_flash_trial_sem];

%plot
figure;
hold on;
errorbar(1:2,psi_loom_means, psi_loom_sems, '-o', 'DisplayName', 'Psi Loom','Color','red');
errorbar(1:2,psi_flash_means, psi_flash_sems, '-x', 'DisplayName', 'Psi Flash', 'Color','red');
errorbar(1:2,veh_loom_means, veh_loom_sems, '-o', 'DisplayName', 'Veh Loom', 'Color','blue');
errorbar(1:2,veh_flash_means, veh_flash_sems, '-x', 'DisplayName', 'Veh Flash', 'Color','blue');

ylabel('Mean freezing time in s (across all mice and all trials)');
xticks([1,2]);
xticklabels({'frames 202-350', 'frames 351-502'})

xlim([0,3]);
ylim([0, 10]);


hold off;
title('Freezing Behaviour in early and late post-stim period');
legend('Location', 'Best');
grid on;

%% Comparing mean difference (across all mice) in early and late post-stim period for individual trials

% difference between early and late post-stim periods across trials 
diff_psi_loom_means =  mean(sum(psi_early_post_stim_loom, 2) / fps, 3) - mean(sum(psi_late_post_stim_loom, 2) / fps, 3);
diff_psi_flash_means = mean(sum(psi_early_post_stim_flash, 2) / fps, 3) - mean(sum(psi_late_post_stim_flash, 2) / fps, 3);
diff_veh_loom_means =   mean(sum(veh_early_post_stim_loom, 2) / fps, 3) - mean(sum(veh_late_post_stim_loom, 2) / fps, 3);
diff_veh_flash_means =  mean(sum(veh_early_post_stim_flash, 2) / fps, 3) - mean(sum(veh_late_post_stim_flash, 2) / fps, 3);

diff_psi_loom_trial_sems = std(sum(diff_psi_loom_means, 2) / fps, [], 3) / sqrt(size(diff_psi_loom_means, 3));
diff_psi_flash_trial_sems = std(sum(diff_psi_flash_means, 2) / fps, [], 3) / sqrt(size(diff_psi_flash_means, 3));
diff_veh_loom_trial_sems = std(sum(diff_veh_loom_means, 2) / fps, [], 3) / sqrt(size(diff_veh_loom_means, 3));
diff_veh_flash_trial_sems = std(sum(diff_veh_flash_means, 2) / fps, [], 3) / sqrt(size(diff_veh_flash_means, 3));

trials = 1:20;
% trial numbers

% Plot Psilocybin Group
figure;
hold on;
errorbar(trials, diff_psi_loom_means, diff_psi_loom_trial_sems, '-o', 'DisplayName', 'Loom');
errorbar(trials, diff_psi_flash_means,diff_psi_flash_trial_sems, '-x', 'DisplayName', 'Flash');
hold off;
title('difference in Freezing between early and late post-stim period: Psilocybin');
legend('Location', 'Best');
grid on;

% Plot Vehicle Group
figure;
hold on;
errorbar(trials, diff_veh_loom_means, diff_veh_loom_trial_sems, '-o', 'DisplayName', 'Loom');
errorbar(trials, diff_veh_flash_means , diff_veh_flash_trial_sems, '-x', 'DisplayName', 'Flash');
hold off;
title('difference in Freezing between early and late post-stim period: Vehicle');
legend('Location', 'Best');
grid on;

%% Comparing mean freezing (of all mice) in early and late post-stim periods across individual trials

fps = 15; % defining frame rate
trials = 1:20;% trial numbers

% Calculating mean freezing time (in seconds) and SEM 

% for early post-stim period 
early_psi_loom_trial_mean = mean(sum(psi_early_post_stim_loom, 2) / fps, 3);
early_psi_flash_trial_mean = mean(sum(psi_early_post_stim_flash, 2) / fps, 3);
early_veh_loom_trial_mean = mean(sum(veh_early_post_stim_loom, 2) / fps, 3);
early_veh_flash_trial_mean = mean(sum(veh_early_post_stim_flash, 2) / fps, 3);

early_psi_loom_trial_sem = std(sum(psi_early_post_stim_loom, 2) / fps, [], 3) / sqrt(size(psi_early_post_stim_loom, 3));
early_psi_flash_trial_sem = std(sum(psi_early_post_stim_flash, 2) / fps, [], 3) / sqrt(size(psi_early_post_stim_flash, 3));
early_veh_loom_trial_sem = std(sum(veh_early_post_stim_loom, 2) / fps, [], 3) / sqrt(size(veh_early_post_stim_loom, 3));
early_veh_flash_trial_sem = std(sum(veh_early_post_stim_flash, 2) / fps, [], 3) / sqrt(size(veh_early_post_stim_flash, 3));

% for late post-stim period 
late_psi_loom_trial_mean = mean(sum(psi_late_post_stim_loom, 2) / fps, 3);
late_psi_flash_trial_mean = mean(sum(psi_late_post_stim_flash, 2) / fps, 3);
late_veh_loom_trial_mean = mean(sum(veh_late_post_stim_loom, 2) / fps, 3);
late_veh_flash_trial_mean = mean(sum(veh_late_post_stim_flash, 2) / fps, 3);

late_psi_loom_trial_sem = std(sum(psi_late_post_stim_loom, 2) / fps, [], 3) / sqrt(size(psi_late_post_stim_loom, 3));
late_psi_flash_trial_sem = std(sum(psi_late_post_stim_flash, 2) / fps, [], 3) / sqrt(size(psi_late_post_stim_flash, 3));
late_veh_loom_trial_sem = std(sum(veh_late_post_stim_loom, 2) / fps, [], 3) / sqrt(size(veh_late_post_stim_loom, 3));
late_veh_flash_trial_sem = std(sum(veh_late_post_stim_flash, 2) / fps, [], 3) / sqrt(size(veh_late_post_stim_flash, 3));


%plot for looms
figure;

hold on;
errorbar(trials,early_psi_loom_trial_mean, early_psi_loom_trial_sem, '-o', 'DisplayName', 'Psi Loom early','Color','red');
errorbar(trials,late_psi_loom_trial_mean, late_psi_loom_trial_sem, '-x', 'DisplayName', 'Psi loom late', 'Color','red');
errorbar(trials,early_veh_loom_trial_mean, early_veh_loom_trial_sem, '-o', 'DisplayName', 'Veh Loom early', 'Color','blue');
errorbar(trials,late_veh_loom_trial_mean, late_veh_loom_trial_sem, '-x', 'DisplayName', 'Veh Loom late', 'Color','blue');
ylabel('Mean freezing time in s');
hold off;

title('Freezing Behaviour to Loom stimuli in early and late post-stim period');
legend('Location', 'Best');
grid on;

%plot for flash
figure;

hold on;
errorbar(trials,early_psi_flash_trial_mean, early_psi_flash_trial_sem, '-o', 'DisplayName', 'Psi Flash early','Color','red');
errorbar(trials,late_psi_flash_trial_mean, late_psi_flash_trial_sem, '-x', 'DisplayName', 'Psi Flash late', 'Color','red');
errorbar(trials,early_veh_flash_trial_mean, early_veh_flash_trial_sem, '-o', 'DisplayName', 'Veh Flash early', 'Color','blue');
errorbar(trials,late_veh_flash_trial_mean, late_veh_flash_trial_sem, '-x', 'DisplayName', 'Veh Flash late', 'Color','blue');
ylabel('Mean freezing time in s');
hold off;

title('Freezing Behaviour to flash stimuli in early and late post-stim period');
legend('Location', 'Best');
grid on;



%% plotting mean time exhibiting behaviour after stimulus
% 
% fps = 15;
% % defining frame rate
% 
% % Calculating mean freezing time (in seconds) and SEM
% psi_loom_trial_means = mean(sum(psi_post_stim_loom, 2) / fps, 3);
% psi_flash_trial_means = mean(sum(psi_post_stim_flash, 2) / fps, 3);
% veh_loom_trial_means = mean(sum(veh_post_stim_loom, 2) / fps, 3);
% veh_flash_trial_means = mean(sum(veh_post_stim_flash, 2) / fps, 3);
% 
% psi_loom_trial_sems = std(sum(psi_post_stim_loom, 2) / fps, [], 3) / sqrt(size(psi_post_stim_loom, 3));
% psi_flash_trial_sems = std(sum(psi_post_stim_flash, 2) / fps, [], 3) / sqrt(size(psi_post_stim_flash, 3));
% veh_loom_trial_sems = std(sum(veh_post_stim_loom, 2) / fps, [], 3) / sqrt(size(veh_post_stim_loom, 3));
% veh_flash_trial_sems = std(sum(veh_post_stim_flash, 2) / fps, [], 3) / sqrt(size(veh_post_stim_flash, 3));
% 
% trials = 1:20;
% % trial numbers
% 
% % Plot Psilocybin Group
% fig1 = figure;
% hold on;
% errorbar(trials, psi_loom_trial_means, psi_loom_trial_sems, '-o', 'DisplayName', 'Loom');
% errorbar(trials, psi_flash_trial_means, psi_flash_trial_sems, '-x', 'DisplayName', 'Flash');
% hold off;
% title([behaviour ' Behaviour (post-stim) Across Repeated Trials: Psilocybin ']);
% legend('Location', 'Best');
% grid on;
% 
% % Plot Vehicle Group
% fig2 = figure;
% hold on;
% errorbar(trials, veh_loom_trial_means, veh_loom_trial_sems, '-o', 'DisplayName', 'Loom');
% errorbar(trials, veh_flash_trial_means, veh_flash_trial_sems, '-x', 'DisplayName', 'Flash');
% hold off;
% title([behaviour ' Behaviour (post-stim)  Across Repeated Trials: Vehicle']);
% legend('Location', 'Best');
% grid on;
% 
% % Set common axis labels
% for i = 1:2
%     figure(i);
%     xlabel('Trial Number');
%     ylabel(['Mean Time Spent ' behaviour ' Post-Stimulus (s)']);
%     % Set consistent axis limits (modify based on data range)
%     xlim([1, 20]);
%     ylim([0, max([psi_loom_trial_means + psi_loom_trial_sems, ...
%                   psi_flash_trial_means + psi_flash_trial_sems, ...
%                   veh_loom_trial_means + veh_loom_trial_sems, ...
%                   veh_flash_trial_means + veh_flash_trial_sems], [], 'all')]);
% end
% 
% %save figures
% saveas(fig1, [ fig_path model_name '_over_trials_psi_post_stim.fig']);
% saveas(fig2, [ fig_path model_name '_over_trials_veh_post_stim.fig']);
% 
% saveas(fig1, [ fig_path model_name '_over_trials_psi_post_stim.jpg']);
% saveas(fig2, [ fig_path model_name '_over_trials_veh_post_stim.jpg']);