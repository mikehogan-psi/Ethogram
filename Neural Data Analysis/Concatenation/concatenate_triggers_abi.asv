%% Concatinating triggers
% This script allows the postprocessing and interpretation of datafiles
% containing event/trigger information
% 
%  1. read the NPY files conta generated 




%% setup filepaths

% define which mouse
   mouse = 'mouse2';

% define which session
    sesh = 'extinction';
  % sesh = 'renewal';

% Define folder path to specific session that you want the data to be concatenated from
common_dir = 'Z:\Abi\neuronal_data\mouse_2\Neural Data\Extinction'; % !!! CHANGE THIS !!!

% get folder paths to habituation, part1 and part2 (of Extinction or renewal session) 
    concistent_path = '\Record Node 101\experiment1\recording1\'; % this should be the same for every recording folder

    hab_path      = dir(fullfile(common_dir, '*habituation*'));
    hab_path      = [common_dir '\' hab_path(1).name concistent_path ];
    hab_path_TTL  = [hab_path 'events\Neuropix-PXI-100.ProbeA\TTL\'];
    hab_path_cont = [hab_path 'continuous\Neuropix-PXI-100.ProbeA\'];
    
    p1_path      = dir(fullfile(common_dir, '*p1*'));
    p1_path      = [common_dir '\' p1_path(1).name concistent_path ];
    p1_path_TTL  = [p1_path 'events\Neuropix-PXI-100.ProbeA\TTL\'];
    p1_path_cont = [p1_path 'continuous\Neuropix-PXI-100.ProbeA\'];
    
    p2_path      = dir(fullfile(common_dir, '*p2*'));
    p2_path      = [common_dir '\' p2_path(1).name concistent_path ];
    p2_path_TTL  = [p2_path 'events\Neuropix-PXI-100.ProbeA\TTL\'];
    p2_path_cont = [p2_path 'continuous\Neuropix-PXI-100.ProbeA\'];

% create output folder where data will be saved
filepath_out = [common_dir '\processed_triggers\'];
    mkdir(filepath_out);
    addpath(filepath_out);

% clear unnecessary variables
    clearvars common_dir concistent_path hab_path p1_path p2_path

%% Step 1: converting python files into MATLAB variables

% habituation data 
evt_hab    = readNPY([hab_path_TTL  'timestamps.npy']); 
states_hab = readNPY([hab_path_TTL  'states.npy']);
cont_hab   = readNPY([hab_path_cont 'timestamps.npy']);

% session part 1 data
evt_p1    = readNPY([p1_path_TTL  'timestamps.npy']); 
states_p1 = readNPY([p1_path_TTL  'states.npy']);
cont_p1   = readNPY([p1_path_cont 'timestamps.npy']);

% session part 2 data
evt_p2    = readNPY([p2_path_TTL  'timestamps.npy']); 
states_p2 = readNPY([p2_path_TTL  'states.npy']);
cont_p2   = readNPY([p2_path_cont 'timestamps.npy']);

% put all data into joined variabes (for loop)
    evt{1} = evt_hab; 
    evt{2} = evt_p1;
    evt{3} = evt_p2;
    states{1} = states_hab; 
    states{2} = states_p1;
    states{3} = states_p2;
    cont{1} = cont_hab; 
    cont{2} = cont_p1;
    cont{3} = cont_p2;


%% Step 2: Aligning trigger timestamps relative to recording start

cont0 = 0; % set start 

evt_hab = evt_hab-cont_hab(1)+cont0;     % Subtract the first continuous timestamp to set continuous start at zero
evt_hab = evt_hab(states_hab==1);        % filters out valid events
evt_hab = evt_hab(2:end);                % remove first trigger which is an artefact
cont0 = cont0+numel(cont_hab);


evt_p1 = evt_p1-cont_p1(1)+cont0;     % Subtract the first continuous timestamp to set continuous start at zero
evt_p1 = evt_p1(states_p1==1);        % filters out valid events
evt_p1 = evt_p1(2:end);             % remove first trigger which is an artefact
cont0 = cont0+numel(cont);

evt_p2 = evt_p2-cont_p1(1)+cont0;     % Subtract the first continuous timestamp to set continuous start at zero
evt_p2 = evt_p2(states_p1==1);        % filters out valid events
evt_p2 = evt_p2(2:end);             % remove first trigger which is an artefact
cont0 = cont0+numel(cont);

%% Step 2: Aligning trigger timestamps relative to recording start (loop)


cont0 = 0; % set start recording time to 0

for s = 1:3

evt{s} = evt-cont{1}(1)+cont0;

evt{s} = evt(states{s}==1);
evt{s} = evt_p2(2:end); 
cont0 = cont0+numel(cont);

end


%% Step 3: concatinating data

%% Step 3: saving data

save([filepath_out mouse '_' sesh 'event_timestamps'],'evt_hab' 'evt_p1' 'evt_p2');

save([filepath_out mouse '_' sesh 'raw_data'],'evt' 'cont' 'states' );


